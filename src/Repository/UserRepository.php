<?php

/*
 * (c) 411 Marketing
 */

namespace App\Repository;

use App\Entity\Department;
use App\Entity\Position;
use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping\ClassMetadata;
use Symfony\Component\Form\Form;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * UserRepository constructor.
     *
     * @param EntityManagerInterface $em
     * @param ClassMetadata|null     $metadata
     */
    public function __construct(EntityManagerInterface $em, ClassMetadata $metadata = null)
    {
        parent::__construct(
            $em,
            null == $metadata ?
                new ClassMetadata(User::class) :
                $metadata
        );
    }

    /**
     * @param string $username
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return mixed
     */
    public function loadUserByUsername($username)
    {
        $queryBuilder = $this->createQueryBuilder('user');
        $queryBuilder
            ->where('user.username = :username')
            ->setParameter('username', $username)
            ->setMaxResults(1);

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    /**
     * @param Form $form
     * @param null $sort
     * @param null $order
     *
     * @return \Doctrine\ORM\Query
     */
    public function getListQuery(Form $form, $sort = null, $order = null)
    {
        $queryBuilder = $this->createQueryBuilder('user');
//        $queryBuilder->join('user.department', 'department');
        $queryBuilder->leftJoin('user.parent', 'parent');
//        $queryBuilder->leftJoin('user.position', 'position');

        if (null !== $form->get('name')->getData()) {
            $queryBuilder->andWhere('user.firstName LIKE :name');
            $queryBuilder->orWhere('user.lastName LIKE :name');
            $queryBuilder->orWhere('user.username LIKE :name');
            $queryBuilder->setParameter('name', $form->get('name')->getData().'%');
        }

//        if (null !== $form->get('department')->getData()) {
//            $queryBuilder->andWhere('user.department = :department');
//            $queryBuilder->setParameter('department', $form->get('department')->getData());
//        }

        if (null !== $form->get('status')->getData()) {
            $queryBuilder->andWhere('user.isActive = :status');
            $queryBuilder->setParameter('status', $form->get('status')->getData());
        }

//        if (null !== $form->get('position')->getData()) {
//            $queryBuilder->andWhere('user.position = :position');
//            $queryBuilder->setParameter('position', $form->get('position')->getData());
//        }

        if (null !== $form->get('report_to')->getData()) {
            $queryBuilder->andWhere('user.parent = :parent');
            $queryBuilder->setParameter('parent', $form->get('report_to')->getData());
        }

        if (null !== $sort && null !== $order) {
            switch ($sort) {
                case 'userId' == $sort:
                    $sortBy = 'user.id';
                    break;

                case 'user' == $sort:
                    $sortBy = 'user.firstName';
                    break;

                case 'username' == $sort:
                    $sortBy = 'user.username';
                    break;

                case 'email' == $sort:
                    $sortBy = 'user.email';
                    break;

//                case 'department' == $sort:
//                    $sortBy = 'department.name ';
//                    break;

                case 'reportTo' == $sort:
                    $sortBy = 'parent.firstName';
                    break;

//                case 'position' == $sort:
//                    $sortBy = 'position.name';
//                    break;

                case 'createdAt' == $sort:
                    $sortBy = 'user.createdAt';
                    break;

                case 'updatedAt' == $sort:
                    $sortBy = 'user.updatedAt';
                    break;

                default:

                    $queryBuilder->orderBy('user.id');
            }

            $queryBuilder->orderBy($sortBy, $order);
        }

        return $queryBuilder->getQuery();
    }

    /**
     * @throws \Doctrine\Common\Persistence\Mapping\MappingException
     *
     * @return \Generator
     */
    public function getListGenerator()
    {
        foreach ($this->getListQuery()->iterate() as $result) {
            yield $result[0];

            $this->getEntityManager()->clear();
        }
    }

    /**
     * @param Department $department
     * @param bool       $onlyQueryBuilder
     *
     * @return \Doctrine\ORM\QueryBuilder|mixed
     */
    public function getActiveUsersByDepartment(Department $department, $onlyQueryBuilder = false)
    {
        $queryBuilder = $this->createQueryBuilder('user')
            ->where('user.department IN (:department)')
            ->andWhere('user.isActive = :isActive')
            ->setParameter('department', $department)
            ->setParameter('isActive', 1)
            ->orderBy('user.username')
            ;
        if ($onlyQueryBuilder) {
            return $queryBuilder;
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function getLBArrayForWorkedDaysReport()
    {
        $queryBuilder = $this->createQueryBuilder('user')
            ->select([
                'user.firstName',
                'user.lastName',
                'user.id',
            ])
            ->where('user.department IN (:department)')
            ->andWhere('user.isActive = 1')
            ->setParameter('department', Department::LINK_BUILDING_DEPARTMENT)
            ->orderBy('user.id')
        ;

        return $queryBuilder->getQuery()->getArrayResult();
    }

    /**
     * @param $positionId
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getUsersByPosition($positionId)
    {
        return $queryBuilder = $this->createQueryBuilder('user')
            ->where('user.position = :positionId')
            ->setParameter('positionId', $positionId);
    }

    /**
     * @param array $department
     * @param array $position
     * @param bool  $onlyActive
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getListTech($department = [], $position = [], $onlyActive = false)
    {
        $queryBuilder = $this->createQueryBuilder('user')
            ->where('user.position = :position ')
            ->andWhere('user.isActive = :active')
            ->andWhere('user.department IN (:department)')
            ->orderBy('user.username', 'ASC');

        if (!$onlyActive) {
            $queryBuilder->setParameter('position', $position)
                ->setParameter('active', 1)
                ->setParameter('department', $department);
        } else {
            $queryBuilder->setParameter('position', $position)
                ->setParameter('active', 0)
                ->setParameter('department', $department);
        }

        return $queryBuilder;
    }

    /**
     * @param array      $name
     * @param Department $department
     * @param Position   $position
     *
     * @return User|null|object
     */
    public function getOrCreateByName(array $name, Department $department, Position $position)
    {
        $user = $this->findOneBy(['firstName' => $name[0], 'lastName' => $name[1]]);

        if (!$user) {
            $user = new User();
            $user->setDepartment($department);
            $user->setFirstName($name[0]);
            $user->setLastName($name[1]);
            $user->setUsername($name[0].' '.$name[1]);
            $user->setEmail('test@example.com');
            $user->setPassword(password_hash('123test', PASSWORD_BCRYPT));
            $user->setIsActive(true);
            $user->setPosition($position);
            $user->setTimezone('Europe/Sofia');
        }

        return $user;
    }

    /**
     * @param Department $department
     * @param Position   $position
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return mixed
     */
    public function getRandomUser(Department $department, Position $position)
    {
        $queryBuilder = $this->createQueryBuilder('user')
            ->addSelect('RAND() as HIDDEN rand')
            ->addOrderBy('rand')
            ->where('user.department = :department')
            ->andWhere('user.position = :position')
            ->andWhere('user.isActive = :isActive')
            ->setParameters(['department' => $department, 'position' => $position, 'isActive' => '1'])
            ->setMaxResults(1)
            ;

        return $queryBuilder->getQuery()->getSingleResult();
    }

    /**
     * @param $department
     * @param $position
     *
     * @return mixed
     */
    public function getLbForLbDistribution($department, $position)
    {
        $date = new \DateTime('now');
        $queryBuilder = $this->createQueryBuilder('user')
            ->where('user.position = :position ')
            ->andWhere('user.isActive = :active')
            ->andWhere('user.department IN (:department)')
            ->andWhere('(user.offWorkFrom IS NULL AND user.offWorkUntil IS NULL) OR (user.offWorkFrom > :date OR user.offWorkUntil < :date)')
            ->setParameter('date', $date)
            ->setParameter('department', $department)
            ->setParameter('position', $position)
            ->setParameter('active', 1)
            ->orderBy('user.username', 'ASC');

        return $queryBuilder->getQuery()->getResult();
    }
}
